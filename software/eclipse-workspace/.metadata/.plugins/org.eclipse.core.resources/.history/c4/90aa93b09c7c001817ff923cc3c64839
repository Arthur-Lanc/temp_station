import java.util.LinkedList;

import edu.princeton.cs.algs4.In;
import edu.princeton.cs.algs4.MinPQ;
import edu.princeton.cs.algs4.StdOut;

public class Solver {
    private MinPQ<searchNode> pq;
    private LinkedList<Board> ll;
    private boolean isSolve;
    private int moveNum;

    private MinPQ<searchNode> pq2;
    private LinkedList<Board> ll2;
    
    // find a solution to the initial board (using the A* algorithm)
    public Solver(Board initial){
        pq = new MinPQ<searchNode>();
        ll = new LinkedList<Board>();
        searchNode sn = new searchNode(initial.getBlocks(),0,null);
        pq.insert(sn);

        Board twinBoard = initial.twin();
        pq2 = new MinPQ<searchNode>();
        ll2 = new LinkedList<Board>();
        searchNode sn2 = new searchNode(twinBoard.getBlocks(),0,null);
        pq2.insert(sn2);

        while(true) {
            sn = pq.delMin();
//            StdOut.println(sn);
            ll.add(sn);
            if(sn.isGoal()){ 
                isSolve = true;
                moveNum = sn.getMoveNum();
                break; 
            }
            for(Board neiBoard : sn.neighbors()) {
//              StdOut.println(neiBoard);
                searchNode preSN = sn.getPredecessor();
                if(preSN != null && neiBoard.equals(preSN.getBlocks())){ continue; }
                searchNode neinode= new searchNode(neiBoard.getBlocks(),sn.getMoveNum()+1,sn);
                pq.insert(neinode);
//                StdOut.println(neinode);
            }

            sn2 = pq2.delMin();
            ll2.add(sn2);
            if(sn2.isGoal()){ 
                isSolve = false;
                break; 
            }
            for(Board neiBoard : sn2.neighbors()) {
                searchNode preSN = sn2.getPredecessor();
                if(preSN != null && neiBoard.equals(preSN.getBlocks())){ continue; }
                searchNode neinode= new searchNode(neiBoard.getBlocks(),sn2.getMoveNum()+1,sn2);
                pq2.insert(neinode);
            }
        }

    }

    private class searchNode extends Board implements Comparable<searchNode>{
        private int moveNum;
        private int manhaValue;
        private int manhaPri;
        private searchNode predecessor;

        public searchNode(int[][] blocks,int moveNum,searchNode predecessor){
            super(blocks);
            this.moveNum = moveNum;
            this.manhaValue = this.manhattan();
            this.manhaPri = this.moveNum + this.manhaValue;
            this.predecessor = predecessor;
        }

        public int getManhaPri(){
            return manhaPri;
        }

        public searchNode getPredecessor(){
            return predecessor;
        }

        public int getMoveNum(){
            return moveNum;
        }
        
        public int compareTo(searchNode other) {
            int s1 = this.getManhaPri();
            int s2 = other.getManhaPri();
            if (s1 == s2){
                return 0;
            }
            else if (s1 < s2){
                return -1;
            }
            else{
                return 1;
            }
        }

    }

    // is the initial board solvable?
    public boolean isSolvable(){
        return isSolve;
    }

    // min number of moves to solve initial board; -1 if unsolvable
    public int moves(){
        if(isSolve) {
            return moveNum;
        }
        else {
            return -1;
        }
    }

    // sequence of boards in a shortest solution; null if unsolvable
    public Iterable<Board> solution(){
        if(isSolve) {
//        	LinkedList<Board> res = new LinkedList<Board>();
//        	for(searchNode sn : ll) {
//        		res.add(sn);
//        	}
//            return res;
            return ll;
        }
        else {
            return null;
        }
    }

    // solve a slider puzzle (given below)
    public static void main(String[] args){
        // create initial board from file
        In in = new In("C:\\Users\\Arthur Lance\\Downloads\\8puzzle-testing\\8puzzle\\puzzle04.txt");
//        In in = new In("C:\\Users\\Arthur Lance\\Downloads\\8puzzle-testing\\8puzzle\\puzzle3x3-unsolvable.txt");
        int n = in.readInt();
        int[][] blocks = new int[n][n];
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                blocks[i][j] = in.readInt();
        Board initial = new Board(blocks);

        // solve the puzzle
        Solver solver = new Solver(initial);
        // for (Board board : solver.ll){
        //     StdOut.println(board);  
        // }
      
        // print solution to standard output
         if (!solver.isSolvable())
             StdOut.println("No solution possible");
         else {
             StdOut.println("Minimum number of moves = " + solver.moves());
             for (Board board : solver.solution())
                 StdOut.println(board);
         }
    }
}