import java.util.Arrays;

import edu.princeton.cs.algs4.StdRandom;
import edu.princeton.cs.algs4.WeightedQuickUnionUF;

public class Percolation {
	private WeightedQuickUnionUF wquuf;
	private int rowGridNum;
	private int[] arrli;
	private int openSiteNum;
	
   public Percolation(int n) {
	   if (n <= 0) {
		   throw new IllegalArgumentException();
	   }
	   
	   wquuf = new WeightedQuickUnionUF(n*n+2);
	   rowGridNum = n;
	   arrli = new int[n*n+2];
       for (int i=0; i<n*n+2; i++) {
           arrli[i] = 0;
       }
       
       arrli[n*n] = 1;
       arrli[n*n+1] = 1;
       openSiteNum = 0;
   }
   
   public void open(int row, int col) {
	   if (row < 1 || row > rowGridNum) {
		   throw new IllegalArgumentException();
	   }
	   
	   if (col < 1 || col > rowGridNum) {
		   throw new IllegalArgumentException();
	   }
	   
	   if (!isOpen(row,col)){
		   int curr = (row-1)*rowGridNum+col-1;
		   arrli[curr] = 1;
		   openSiteNum += 1;
		   
		   if (curr >= 0 && curr < rowGridNum) {
			   wquuf.union(rowGridNum*rowGridNum, curr);
		   }
		   
		   if (curr >= (rowGridNum-1)*rowGridNum && curr < (rowGridNum-1)*rowGridNum+rowGridNum) {
			   wquuf.union(rowGridNum*rowGridNum+1, curr);
		   }
		   
		   int a = (row-2)*rowGridNum+col-1;
		   int b= (row)*rowGridNum+col-1;
		   int c = (row-1)*rowGridNum+col-2;
		   int d= (row-1)*rowGridNum+col;
		   if (a >= 0 && a <= rowGridNum*rowGridNum-1 && arrli[a] == 1){
			   wquuf.union(a, curr);
		   }
		   if (b >= 0 && b <= rowGridNum*rowGridNum-1 && arrli[b] == 1){
			   wquuf.union(b, curr);
		   }
		   if (c >= 0 && c <= rowGridNum*rowGridNum-1 && arrli[c] == 1){
			   wquuf.union(c, curr);
		   }
		   if (d >= 0 && d <= rowGridNum*rowGridNum-1 && arrli[d] == 1){
			   wquuf.union(d, curr);
		   }
	   }
   }
   
   public boolean isOpen(int row, int col) {
	   if (row < 1 || row > rowGridNum) {
		   throw new IllegalArgumentException();
	   }
	   
	   if (col < 1 || col > rowGridNum) {
		   throw new IllegalArgumentException();
	   }
	   
	   if (arrli[(row-1)*rowGridNum+col-1] == 1){
		   return true;
	   }
	   else {
		   return false;
	   }
   }
   
   public boolean isFull(int row, int col) {
	   if (row < 1 || row > rowGridNum) {
		   throw new IllegalArgumentException();
	   }
	   
	   if (col < 1 || col > rowGridNum) {
		   throw new IllegalArgumentException();
	   }
	   
	   int curr = (row-1)*rowGridNum+col-1;
	   
	   if(wquuf.connected(curr, rowGridNum*rowGridNum)) {
		   return true;
	   }
	   else {
		   return false;
	   }
   }
   
   public int numberOfOpenSites() {
	   return openSiteNum;
   }
   
   public boolean percolates() {
	   if(wquuf.connected(rowGridNum*rowGridNum+1, rowGridNum*rowGridNum)) {
		   return true;
	   }
	   else {
		   return false;
	   }
   }
   
   private void allFind() {
	   for (int i=0; i<rowGridNum*rowGridNum+2; i++) {
		   System.out.println(wquuf.find(i));
	   }
   }
   
   public static void main(String[] args) {
//	   System.out.println("start");
//	   int n = 200;
//	   Percolation pcl = new Percolation(n);
////	   System.out.println(pcl.arrli);
////	   System.out.println(pcl.arrli.size());
////	   pcl.open(1, 1);
////	   pcl.open(2, 1);
////	   System.out.println();
////	   pcl.allFind();
////	   System.out.println(pcl.arrli);
////	   System.out.println(pcl.percolates());
//	   
//	   while(true) {
//		   int row = StdRandom.uniform(1,n+1);
//		   int col = StdRandom.uniform(1,n+1);
////		   System.out.println("row: " + row+"col: " + col);
//		   pcl.open(row, col);
//		   if (pcl.percolates()){
//			   break;
//		   }
//	   }
//	   System.out.println(pcl.numberOfOpenSites());
//	   System.out.println(n*n);
//	   System.out.println(((double)pcl.numberOfOpenSites())/(n*n));
//	   
//	   System.out.println("end");
	   
	   int n = 6;
	   Percolation pcl = new Percolation(n);
   System.out.println(Arrays.toString(pcl.arrli));
   System.out.println(pcl.arrli.length);
   pcl.open(1, 1);
   pcl.open(2, 1);
//   System.out.println();
//   pcl.allFind();
//   System.out.println(pcl.arrli);
//   System.out.println(pcl.percolates());
   }
}
